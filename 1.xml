<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="Google.com" />
<Content type="html"><![CDATA[


<!DOCTYPE html>
<html lang="tr">
<head>
  <meta charset="UTF-8" />
  <title>fnfa.swf - Ruffle ile</title>
  <script>
    window.RufflePlayer = window.RufflePlayer || {};
    window.RufflePlayer.config = {
      autoplay: "on",
      unmuteOverlay: "visible",
      fitToWindow: true,
      scale: "exactFit",
      showSwfDownload: false
    };
  </script>
  <script src="https://unpkg.com/@ruffle-rs/ruffle"></script>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      background: black;
      height: 100%;
      overflow: hidden;
    }

    #loading {
      position: absolute;
      z-index: 1000;
      width: 100%;
      height: 100%;
      background: black;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 1.5rem;
      flex-direction: column;
    }

    .loader-bar {
      width: 200px;
      height: 10px;
      background: #444;
      margin-top: 15px;
      border-radius: 5px;
      overflow: hidden;
    }

    .loader-bar-fill {
      width: 0%;
      height: 100%;
      background: #00bfff;
      animation: loading 2.5s linear forwards;
    }

    @keyframes loading {
      to {
        width: 100%;
      }
    }

    #ruffle-container {
      width: 100vw;
      height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    canvas {
      width: 100% !important;
      height: 100% !important;
    }
  </style>
</head>
<body>
  <div id="loading">
    YÃ¼kleniyor...
    <div class="loader-bar">
      <div class="loader-bar-fill"></div>
    </div>
  </div>

  <div id="ruffle-container"></div>

  <script>
    async function fetchAndCombineParts(partUrls) {
      const buffers = await Promise.all(partUrls.map(url => fetch(url).then(res => res.arrayBuffer())));
      const totalLength = buffers.reduce((sum, buf) => sum + buf.byteLength, 0);
      const combined = new Uint8Array(totalLength);

      let offset = 0;
      for (const buf of buffers) {
        combined.set(new Uint8Array(buf), offset);
        offset += buf.byteLength;
      }

      return new Blob([combined], { type: "application/x-shockwave-flash" });
    }

    (async () => {
      const partUrls = [
        "https://cdn.jsdelivr.net/gh/fnafben/fx@main/fnfa.part0",
        "https://cdn.jsdelivr.net/gh/fnafben/fx@main/fnfa.part1",
        "https://cdn.jsdelivr.net/gh/fnafben/fx@main/fnfa.part2",
        "https://cdn.jsdelivr.net/gh/fnafben/fx@main/fnfa.part3",
        "https://cdn.jsdelivr.net/gh/fnafben/fx@main/fnfa.part4",
        "https://cdn.jsdelivr.net/gh/fnafben/fx@main/fnfa.part5",
        "https://cdn.jsdelivr.net/gh/fnafben/fx@main/fnfa.part6"
      ];

      const blob = await fetchAndCombineParts(partUrls);
      const blobUrl = URL.createObjectURL(blob);

      const rufflePlayer = window.RufflePlayer.newest();
      const container = document.getElementById("ruffle-container");
      const player = rufflePlayer.createPlayer();

      container.appendChild(player);
      player.load(blobUrl);

      setTimeout(() => {
        document.getElementById("loading").style.display = "none";
      }, 3000);
    })();
  </script>
</body>
</html>







]]></Content>
</Module>